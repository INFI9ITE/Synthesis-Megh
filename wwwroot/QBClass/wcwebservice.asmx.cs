using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.Services;
using wwwrootBL.Entity;
using wwwroot.Models;
using wwwroot.QBOnline;

namespace wwwroot.QBClass
{
    /// <summary>
    /// Summary description for wcwebservice
    /// </summary>
    [WebService(
       Namespace = "http://developer.intuit.com/",
       Name = "wcwebservice",
       Description = "Web Connector Service by CfoView.com")]

    public class wcwebservice : System.Web.Services.WebService
    {
        WestZoneEntities DB = new WestZoneEntities();

        #region GlobalVariables
        public int count = 0;
        public int CompanyID = 0;
        public string Type = "";
        public int percentage = 0;
        public static ArrayList req = new ArrayList();
        public static ArrayList reqIdent = new System.Collections.ArrayList();
        public static ArrayList reqID = new System.Collections.ArrayList();
        #endregion

        #region Constructor

        public wcwebservice()
        {
            //CODEGEN: This call is required by the ASP.NET 
            //Web Services Designer
            InitializeComponent();
        }

        private void InitializeComponent()
        {
        }

        #endregion

        #region AutoGeneratedMethods

        private IContainer components = null;

        protected override void Dispose(bool disposing)
        {
            if (disposing && components != null)
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #endregion



        [WebMethod(EnableSession = true)]
        public string[] authenticate(string strUserName, string strPassword)
        {
            req.Clear();
            reqIdent.Clear();
            reqID.Clear();
            Session["ComID"] = null;
            Session["counter"] = null;
            string[] authReturn = new string[2];
            authReturn[0] = System.Guid.NewGuid().ToString();
            //QBWebConnectorMappingModel qBWebConnectorMappingModel = new QBWebConnectorMappingModel();
            //qBWebConnectorMappingModel.UserName = strUserName;
            //qBWebConnectorMappingModel.Password = strPassword;
            //qBWebConnectorMappingModel.IsActive = true;
            DataTable dt = new QBWebConnectorMappingModelBAL().GetData();

            //List<QBWebConnectorMappingModel> studentList = new List<QBWebConnectorMappingModel>();
            //var studentList = (from DataRow dr in dt.Rows
            //               select new QBWebConnectorMappingModel
            //               {
            //                   ID = Convert.ToInt32(dr["StudentId"]),
            //                   StudentName = dr["StudentName"].ToString(),
            //                   Address = dr["Address"].ToString(),
            //                   MobileNo = dr["MobileNo"].ToString()
            //               }).ToList();

            var item = (from DataRow dr in dt.Rows
                        select new QBWebConnectorMappingModel
                        {
                            ID = Convert.ToInt32(dr["ID"]),
                            WebCompanyID = Convert.ToInt32(dr["WebCompanyID"]),
                            QBCompanyPath = dr["QBCompanyPath"].ToString(),
                            OwnerID = Guid.Parse(dr["OwnerID"].ToString()),
                            FileID = Guid.Parse(dr["FileID"].ToString()),
                            AppName = dr["AppName"].ToString(),
                            UserName = dr["UserName"].ToString(),
                            Password = dr["Password"].ToString(),
                            IsActive = Convert.ToBoolean(dr["IsActive"].ToString())
                        }).Where(a => a.UserName == strUserName && a.Password == strPassword && a.IsActive == true).FirstOrDefault();

            if (item != null)
            {
                string id = item.ID.ToString();
            }

            if (item != null)
            {
                if (Session["ComID"] == null)
                {
                    Session["ComID"] = item.WebCompanyID.ToString();
                }
                authReturn[1] = item.QBCompanyPath.ToString();
            }
            else
            {
                authReturn[1] = "nvu";
            }
            return authReturn;
        }

        [WebMethod(EnableSession = true)]
        public string connectionError(string ticket, string hresult, string message)
        {
            if (Session["ce_counter"] == null)
            {
                Session["ce_counter"] = 0;
            }

            string retVal = null;
            // 0x80040400 - QuickBooks found an error when parsing the provided XML text stream. 
            const string QB_ERROR_WHEN_PARSING = "0x80040400";
            // 0x80040401 - Could not access QuickBooks.  
            const string QB_COULDNT_ACCESS_QB = "0x80040401";
            // 0x80040402 - Unexpected error. Check the qbsdklog.txt file for possible, additional information. 
            const string QB_UNEXPECTED_ERROR = "0x80040402";
            // Add more as you need...

            return retVal;
        }

        [WebMethod(EnableSession = true)]
        public string sendRequestXML(string ticket, string strHCPResponse, string strCompanyFileName, string qbXMLCountry, int qbXMLMajorVers, int qbXMLMinorVers)
        {
            if (Session["counter"] == null)
            {
                Session["counter"] = 0;
            }
            if (req.Count == 0)
                req = buildRequest(qbXMLMajorVers.ToString() + ".0");

            string request = "";
            int total = req.Count;
            count = Convert.ToInt32(Session["counter"]);

            if (count < total)
            {
                request = req[count].ToString();
                Session["counter"] = ((int)Session["counter"]) + 1;
            }
            else
            {
                count = 0;
                Session["counter"] = 0;
                request = "";
            }
            return request;
        }

        [WebMethod(EnableSession = true)]
        public int receiveResponseXML(string ticket, string response, string hresult, string message)
        {
            QBCreateRequest oQBRequest = new QBCreateRequest();
            BOLQBRequestMaster oReq = new BOLQBRequestMaster();
            QBExtractResponse oQBExtract = new QBExtractResponse();

            int retVal = 0;
            if (!hresult.ToString().Equals(""))
            {
                retVal = -101;
            }
            else
            {
                int total = req.Count;
                int count = Convert.ToInt32(Session["counter"]);

                //switch (reqIdent[count - 1].ToString())
                //{
                //    case "RetrieveVendor":
                //        oQBExtract.ExtractQBResponse_Vendor(response, "VendorQueryRs", Convert.ToInt32(Session["ComID"].ToString()));
                //        break;
                //    case "RetrieveAccount":
                //        oQBExtract.ExtractQBResponse_Account(response, "AccountQueryRs", Convert.ToInt32(Session["ComID"].ToString()));

                //        //CreateVendor
                //        string AddVenRes = oQBRequest.GenrateXmlRequest_AddVendor("13.0", Convert.ToInt32(Session["ComID"].ToString()));
                //        if(AddVenRes != "")
                //        {
                //            req.Add(AddVenRes);
                //            reqIdent.Add("CreateVendor");
                //        }

                //        //UpdateVendor
                //        string ModVenRes = oQBRequest.GenrateXmlRequest_ModVendor("13.0", Convert.ToInt32(Session["ComID"].ToString()));
                //        if(ModVenRes != "")
                //        {
                //            req.Add(ModVenRes);
                //            reqIdent.Add("UpdateVendor");
                //        }

                //        //CreateAccount
                //        string AddAccRes = oQBRequest.GenrateXmlRequest_AddAccount("13.0", Convert.ToInt32(Session["ComID"].ToString()));
                //        if(AddAccRes != "")
                //        {
                //            req.Add(AddAccRes);
                //            reqIdent.Add("CreateAccount");
                //        }

                //        //UpdateAccount
                //        string ModAccRes = oQBRequest.GenrateXmlRequest_ModAccount("13.0", Convert.ToInt32(Session["ComID"].ToString()));
                //        if(ModAccRes != "")
                //        {
                //            req.Add(ModAccRes);
                //            reqIdent.Add("UpdateAccount");
                //        }

                //        break;

                //    case "CreateVendor":
                //        oQBExtract.CreateQBResponse_Vendor(response, "VendorAddRs", Convert.ToInt32(Session["ComID"].ToString()));
                //        break;
                //    case "CreateAccount":
                //        oQBExtract.CreateQBResponse_Account(response, "AccountAddRs", Convert.ToInt32(Session["ComID"].ToString()));
                //        break;
                //    case "UpdateVendor":
                //        oQBExtract.ModQBResponse_Vendor(response, "VendorModRs", Convert.ToInt32(Session["ComID"].ToString()));
                //        break;
                //    case "UpdateAccount":
                //        oQBExtract.ModQBResponse_Account(response, "AccountModRs", Convert.ToInt32(Session["ComID"].ToString()));
                //        break;
                //    case "CreateInvoice":
                //        if (Session["IsInvoice"].ToString() == "1")
                //        {
                //            oQBExtract.CreateQBResponse_Invoice(response, "BillAddRs", Convert.ToInt32(Session["ComID"].ToString()));
                //        }
                //        break;
                //}
                total = req.Count;
                percentage = (count * 100) / total;
                if (percentage >= 100 && Session["IsInvoice"].ToString() == "0")
                {
                    //CreateInvoice
                    //string BillRes = oQBRequest.GenrateXmlRequest_AddBill("13.0", Convert.ToInt32(Session["ComID"].ToString()));
                    //if(BillRes != "")
                    //{
                    //    req.Add(BillRes);
                    //    reqIdent.Add("CreateInvoice");
                    //}

                    Session["IsInvoice"] = "1";
                }
                total = req.Count;
                percentage = (count * 100) / total;

                if (percentage >= 100)
                {
                    count = 0;
                    Session["counter"] = 0;
                }
                retVal = percentage;
            }
            return retVal;
        }

        [WebMethod]
        public string getLastError(string ticket)
        {
            int errorCode = 0;
            string retVal = null;
            if (errorCode == -101)
            {
                retVal = "QuickBooks was not running!"; // This is just an example of custom user errors
            }
            else
            {
                retVal = "Error!";
            }
            return retVal;
        }

        [WebMethod]
        public string closeConnection(string ticket)
        {
            string retVal = null;
            retVal = "OK";
            return retVal;
        }

        public ArrayList buildRequest(string Version)
        {
            QBCreateRequest oQBRequest = new QBCreateRequest();

            CompanyID = Convert.ToInt32(Session["ComID"].ToString());
            Session["IsInvoice"] = 0;

            //GetVendor
            //req.Add(oQBRequest.GenerateXmlRequest_RetrieveVendors(Version));
            //reqIdent.Add("RetrieveVendor");

            ////GetAccount
            //req.Add(oQBRequest.GenerateXmlRequest_RetrieveAccounts(Version));
            //reqIdent.Add("RetrieveAccount");

            return req;
        }

    }
}
